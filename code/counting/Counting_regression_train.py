# -*- coding: utf-8 -*-
"""「regression.ipynb」的副本

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-JmCX8jiljndXogDafZMqQaMwB2cChHq
"""

!pip install -q scikit-learn

# 安裝必要套件
!pip install -q scikit-learn pandas matplotlib seaborn

# 匯入套件
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor, VotingRegressor
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from google.colab import files
import warnings
warnings.filterwarnings('ignore')

# 上傳 train.csv
print("Please upload train.csv file:")
uploaded = files.upload()
csv_path = list(uploaded.keys())[0]

# 定義類別
categories = ['adult_males', 'subadult_males', 'adult_females', 'juveniles', 'pups']
category_names = ['Adult Males', 'Subadult Males', 'Adult Females', 'Juveniles', 'Pups']

# 載入資料
df = pd.read_csv(csv_path)
df['total_count'] = df[categories].sum(axis=1)
df = df[df['total_count'] > 0].copy()

# 特徵工程：加入 log_total
df['log_total'] = np.log1p(df['total_count'])
X = df[['total_count', 'log_total']].values
y = df[categories].values

# 分割資料
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# 建立模型：VotingRegressor（Linear + RF + MLP）
from sklearn.multioutput import MultiOutputRegressor

base_model = VotingRegressor([
    ('lr', LinearRegression()),
    ('rf', RandomForestRegressor(n_estimators=100, random_state=42)),
    ('mlp', MLPRegressor(hidden_layer_sizes=(128, 64), max_iter=1000, random_state=42))
])

model = MultiOutputRegressor(base_model)

print("Training ensemble model...")
model.fit(X_train, y_train)
print("Training complete!")

# 預測
y_train_pred = model.predict(X_train)
y_test_pred = model.predict(X_test)

# 評估函式
def evaluate_model(y_true, y_pred, dataset_name=""):
    print(f"\n{dataset_name} Evaluation Results:")
    print("=" * 50)
    results = {}

    for i, (cat, name) in enumerate(zip(categories, category_names)):
        mse = mean_squared_error(y_true[:, i], y_pred[:, i])
        rmse = np.sqrt(mse)
        mae = mean_absolute_error(y_true[:, i], y_pred[:, i])
        r2 = r2_score(y_true[:, i], y_pred[:, i])
        results[cat] = {'MSE': mse, 'RMSE': rmse, 'MAE': mae, 'R²': r2}
        print(f"{name}:")
        print(f"  RMSE: {rmse:.2f}")
        print(f"  MAE: {mae:.2f}")
        print(f"  R²: {r2:.4f}\n")

    total_true = y_true.sum(axis=1)
    total_pred = y_pred.sum(axis=1)
    total_rmse = np.sqrt(mean_squared_error(total_true, total_pred))
    total_mae = mean_absolute_error(total_true, total_pred)
    total_r2 = r2_score(total_true, total_pred)
    print("Total Count Accuracy:")
    print(f"  RMSE: {total_rmse:.2f}")
    print(f"  MAE: {total_mae:.2f}")
    print(f"  R²: {total_r2:.4f}")

    return results

# 評估結果
train_results = evaluate_model(y_train, y_train_pred, "Training Set")
test_results = evaluate_model(y_test, y_test_pred, "Test Set")

# 上傳 test.csv（只有 image_id 與 total 欄，可能缺少某些 image_id）
print("\nPlease upload test.csv file (with image_id and total columns):")
uploaded_test = files.upload()
test_csv_path = list(uploaded_test.keys())[0]

# 讀取 test.csv 並建立完整 image_id 清單
raw_test_df = pd.read_csv(test_csv_path)
full_id_df = pd.DataFrame({'image_id': range(18636)})

# 合併，補齊缺漏 ID，缺少的 total 設為 0
test_df = pd.merge(full_id_df, raw_test_df, on='image_id', how='left')
test_df['total'] = test_df['total'].fillna(0)

# 特徵工程：加上 log_total
test_df['log_total'] = np.log1p(test_df['total'])

# 預測條件分兩種：
# total > 0：用模型預測
# total = 0：預設為全 0
X_test_nonzero = test_df[test_df['total'] > 0][['total', 'log_total']].copy()
X_test_nonzero['total'] *= 1.2
X_test_nonzero['log_total'] = np.log1p(X_test_nonzero['total'])  # 重新計算 log_total
X_test_nonzero = X_test_nonzero.values

pred_nonzero = model.predict(X_test_nonzero)
pred_nonzero = np.round(np.maximum(pred_nonzero, 0)).astype(int)

# 全 0 資料行數
zero_rows = test_df['total'] == 0
pred_zeros = np.zeros((zero_rows.sum(), len(categories)), dtype=int)

# 合併預測結果（順序與 test_df 對應）
final_preds = np.zeros((len(test_df), len(categories)), dtype=int)
final_preds[~zero_rows.values] = pred_nonzero
final_preds[zero_rows.values] = pred_zeros

# ✅ 執行三步調整：pups 加20%；juveniles 一半加到 pups，從 adult_females 減去
final_preds = final_preds.astype(float)

# Step 1: pups += 20%
pups_idx = categories.index('pups')
final_preds[:, pups_idx] *= 1.2

# Step 2: transfer 50% juveniles to pups, subtract same amount from adult_females
juvenile_idx = categories.index('juveniles')
adult_female_idx = categories.index('adult_females')
juvenile_half = final_preds[:, juvenile_idx] * 0.5
final_preds[:, pups_idx] += juvenile_half
final_preds[:, adult_female_idx] -= juvenile_half

# 四捨五入並限制為非負整數
final_preds = np.round(np.maximum(final_preds, 0)).astype(int)

# 建立輸出 DataFrame（只包含 test_id 和類別預測）
pred_df = pd.DataFrame(final_preds, columns=categories)
pred_df.insert(0, 'test_id', range(len(pred_df)))

# 顯示預測結果（前幾列）
print("\nAdjusted predicted class counts (pups +20%, juveniles ➝ pups, adult_females ↓):")
print(pred_df.head())

# 儲存為 submission.csv
pred_df.to_csv("submission.csv", index=False)
print("\nSaved adjusted predictions to 'submission.csv'")

# 上傳 test.csv（只有 image_id 與 total 欄，可能缺少某些 image_id）
print("\nPlease upload test.csv file (with image_id and total columns):")
uploaded_test = files.upload()
test_csv_path = list(uploaded_test.keys())[0]

# 定義類別與比例
categories = ['adult_males', 'subadult_males', 'adult_females', 'juveniles', 'pups']
proportions = np.array([0.064, 0.052, 0.449, 0.240, 0.195])


# 讀取 test.csv 並建立完整 image_id 清單
raw_test_df = pd.read_csv(test_csv_path)
full_id_df = pd.DataFrame({'image_id': range(18636)})

# 合併，補齊缺漏 ID，缺少的 total 設為 0
test_df = pd.merge(full_id_df, raw_test_df, on='image_id', how='left')
test_df['total'] = test_df['total'].fillna(0)

# 依照 total 分配為五類
totals = test_df['total'].values.reshape(-1, 1)
distributed = totals * proportions  # 分配
distributed = np.round(np.maximum(distributed, 0)).astype(int)

# 建立 DataFrame 並加上 test_id
pred_df = pd.DataFrame(distributed, columns=categories)
pred_df.insert(0, 'test_id', range(len(pred_df)))

# 顯示結果（前幾列）
print("\nDistributed predictions based on fixed proportions:")
print(pred_df.head())

# 儲存為 submission.csv
pred_df.to_csv("submission.csv", index=False)
print("\nSaved fixed-distribution predictions to 'submission.csv'")